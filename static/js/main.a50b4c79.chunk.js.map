{"version":3,"sources":["api/data.ts","components/User.tsx","components/CommentList.tsx","components/SearchPost.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["API_URL","getPreparedPosts","a","Promise","all","fetch","then","response","json","posts","users","comments","preparedPosts","map","post","user","find","id","userId","filter","comment","postId","User","name","email","address","className","href","street","suite","city","CommentList","body","key","SearchPost","onSearch","query","value","onChange","event","htmlFor","PostList","useState","setQuery","filteredQuery","setFilteredQuery","visiblePosts","useMemo","title","toLowerCase","includes","setFilteredQueryWithDebounce","useCallback","debounce","handleSearch","target","App","setPosts","isLoading","setLoading","isLoaded","setLoaded","type","onClick","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a50b4c79.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getPosts = () => {\n  return fetch(`${API_URL}/posts`)\n    .then(response => response.json());\n};\n\nconst getUsers = () => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json());\n};\n\nconst getComments = () => {\n  return fetch(`${API_URL}/comments`)\n    .then(response => response.json());\n};\n\nexport const getPreparedPosts = async () => {\n  const [posts, users, comments] = await Promise.all(\n    [getPosts(), getUsers(), getComments()]\n  );\n\n  const preparedPosts = posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n\n  return preparedPosts;\n};\n","import React, { FC } from 'react';\n\nexport const User: FC<User> = ({ name, email, address }) => {\n  return (\n    <section className=\"user post__user\">\n      <p className=\"user__name\">{name}</p>\n      <a href={`mailto:${email}`} className=\"user__email\">\n        {email}\n      </a>\n      <address className=\"user__address\">\n        <div>{`${address.street}, ${address.suite}`}</div>\n        <div>{address.city}</div>\n      </address>\n    </section>\n  );\n};\n","import React, { FC } from 'react';\n\nexport const CommentList: FC<Comments> = ({ comments }) => (\n  <>\n    {comments.map(({\n      id, name, body, email,\n    }) => (\n      <section className=\"post__comment\" key={id}>\n        <p className=\"comment__name\">{name}</p>\n        <p className=\"comment__body\">{body}</p>\n        <a href={`mailto:${email}`} className=\"comment__email\">\n          {email}\n        </a>\n      </section>\n    ))}\n  </>\n);\n","import React, { FC } from 'react';\n\nexport const SearchPost: FC<SearchPost> = ({ onSearch, query }) => {\n  return (\n    <div className=\"row\">\n      <form className=\"col s12\">\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <textarea\n              id=\"textarea1\"\n              value={query}\n              className=\"materialize-textarea\"\n              onChange={(event) => onSearch(event)}\n            />\n            <label htmlFor=\"textarea1\">Type something to search post...</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import React, {\n  FC, useState, useCallback, useMemo, ChangeEvent,\n} from 'react';\nimport debounce from 'lodash/debounce';\nimport { User } from './User';\nimport { CommentList } from './CommentList';\nimport { SearchPost } from './SearchPost';\n\nexport const PostList: FC<Posts> = ({ posts }) => {\n  const [query, setQuery] = useState('');\n  const [filteredQuery, setFilteredQuery] = useState('');\n\n  const visiblePosts = useMemo(() => {\n    const filteredPosts = [...posts].filter(post => {\n      const title = post.title.toLowerCase();\n      const body = post.body.toLowerCase();\n\n      return (title + body).includes(filteredQuery.toLowerCase());\n    });\n\n    return filteredPosts;\n  }, [posts, filteredQuery]);\n\n  const setFilteredQueryWithDebounce = useCallback(\n    debounce(setFilteredQuery, 1000),\n    [],\n  );\n\n  const handleSearch = useCallback(({ target }: ChangeEvent<HTMLTextAreaElement>) => {\n    const { value } = target;\n\n    setQuery(value);\n    setFilteredQueryWithDebounce(value);\n  }, [setFilteredQueryWithDebounce]);\n\n  return (\n    <>\n      <SearchPost onSearch={handleSearch} query={query} />\n      <article className=\"app__post-list\">\n        {visiblePosts.map(({\n          id, title, user, body, comments,\n        }) => (\n          <section className=\"post\" key={id}>\n            <h5 className=\"post__title\">{title}</h5>\n            <p className=\"post__body\">{body}</p>\n            <User {...user} />\n            <p className=\"comment__heading\">Comments</p>\n            <CommentList comments={comments} />\n          </section>\n        ))}\n      </article>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { getPreparedPosts } from './api/data';\nimport { PostList } from './components/PostList';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n\n  const loadPosts = () => {\n    setLoading(true);\n\n    getPreparedPosts()\n      .then(data => setPosts(data));\n\n    setLoading(false);\n    setLoaded(true);\n  };\n\n  return (\n    <main className=\"app\">\n      <div className=\"app__header\">\n        <h2 className=\"app__heading\">Dynamic list of posts</h2>\n        {!isLoading && !isLoaded\n        && (\n          <button\n            type=\"button\"\n            className=\"waves-effect waves-light btn deep-purple accent-3\"\n            onClick={loadPosts}\n          >\n            load data\n          </button>\n        )}\n        {isLoading && <p>Loading...</p>}\n      </div>\n      {isLoaded && <PostList posts={posts} />}\n    </main>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}